/* Generated By:JavaCC: Do not edit this line. SemanticAnalyser.java */
import java.util.*;
import java.io.*;
import java.lang.*;

class SemanticAnalyser implements SemanticAnalyserConstants {
  public static void main(String[] arg)
  throws ParseException, IOException {
    if (arg.length != 1) {
        System.out.println("Usage: SemanticAnalyser <input file name>");
        System.exit(0);
    }
    InputStream is = new FileInputStream(arg[0]);


    SemanticAnalyser parser = new SemanticAnalyser(is);
    // check Semantic 
    Node programNode = parser.Start();
    //programNode.print("");    
    //System.out.println("-------------------");

    boolean flag = false;
    flag = Semantic.checkProgram(programNode);

    if (flag) System.out.println("Check succeeded");
    if (!flag) System.out.println("Check failed");

  }

  static final public Node Start() throws ParseException {
    Node td;
    td = TopDec_List();
    jj_consume_token(0);
     {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  static final public Node TopDec_List() throws ParseException {
        Node tdec;
        Node tdec_list;
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case INT:
    case VOID:
      tdec = TopDec();
      tdec_list = TopDec_List();
                n = new Node(Id.TOPDEC);
                n.add(tdec);
                n.addTree(tdec_list);
                {if (true) return n;}
      break;
    default:
      jj_la1[0] = jj_gen;

                n = new Node(Id.EMPTY_STMNT);
                {if (true) return n;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node TopDec() throws ParseException {
        Node n, ftype, id, fb;
        Node formals;
        Token t;
    if (jj_2_2(2147483647)) {
      n = VarDec();
      jj_consume_token(SEMI);
                {if (true) return n;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case INT:
      case VOID:
        ftype = Funtype();
        id = Identifier();
        jj_consume_token(LPAREN);
        formals = Formals();
        jj_consume_token(RPAREN);
        if (jj_2_1(2)) {
          jj_consume_token(SEMI);
                n = new Node(Id.EXTERN);
                n.add(ftype);
                n.add(id);
                n.add(formals);
                {if (true) return n;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMI:
          case LBRACE:
            fb = Funbody();
                n = new Node(Id.FUNC);
                n.add(ftype);
                n.add(id);
                n.add(formals);
                n.add(fb);
                {if (true) return n;}
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

// I combined ScalarDec and ArrayDec to avoid making conflict and using LOOKAHEAD.
  static final public Node VarDec() throws ParseException {
        Node typename, id, intCont;
        Node n;
    typename = TypeName();
    id = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      intCont = IntegerLiteral();
      jj_consume_token(RBRACK);
                        n = new Node(Id.ARR_TYPE);
                        n.add(typename);
                        n.add(id);
                        n.add(intCont);
                        {if (true) return n;}
      break;
    default:
      jj_la1[3] = jj_gen;

                        n = new Node(Id.SCALAR_TYPE);
                        n.add (typename);
                        n.add (id);
                        {if (true) return n;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node TypeName() throws ParseException {
        Node n;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
                n = new Node(Id.INT);
                n.setPosition(Position.fromToken(t));
                {if (true) return n;}
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                n = new Node(Id.CHAR);
                n.setPosition(Position.fromToken(t));
                {if (true) return n;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Funtype() throws ParseException {
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case INT:
      n = TypeName();
                {if (true) return n;}
      break;
    case VOID:
      jj_consume_token(VOID);
                n = new Node(Id.VOID);
                {if (true) return n;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Funbody() throws ParseException {
        Node l, stmts;
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      l = Locals();
      stmts = Stmts();
      jj_consume_token(RBRACE);
                n = new Node(Id.FUNCBODY);
                n.add (l);
                n.add(stmts);
                {if (true) return n;}
      break;
    case SEMI:
      jj_consume_token(SEMI);
                {if (true) return new Node(Id.EMPTY_STMNT);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Formals() throws ParseException {
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
                 n = new Node(Id.VOID);
      break;
    case CHAR:
    case INT:
      n = Formal_List();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Formal_List() throws ParseException {
        Node formaldec, formal_list;
        Node n;
    formaldec = FormalDec();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      formal_list = Formal_List();
                n = new Node(Id.FORMAL);
                n.add(formaldec);
                n.addTree(formal_list);
                {if (true) return n;}
      break;
    default:
      jj_la1[8] = jj_gen;

                n = new Node(Id.FORMAL);
                n.add(formaldec);
                {if (true) return n;}
    }
    throw new Error("Missing return statement in function");
  }

// Cause I deleted scalardec, I modified this one, too.
  static final public Node FormalDec() throws ParseException {
        Node typename, id;
        Node n;
    typename = TypeName();
    id = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      jj_consume_token(RBRACK);
                        n = new Node(Id.ARR_TYPE);
                        n.add(typename);
                        n.add(id);
                        {if (true) return n;}
      break;
    default:
      jj_la1[9] = jj_gen;

                        n = new Node(Id.SCALAR_TYPE);
                        n.add(typename);
                        n.add(id);
                        {if (true) return n;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Locals() throws ParseException {
        Node vardec, locals;
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case INT:
      vardec = VarDec();
      jj_consume_token(SEMI);
      locals = Locals();
                n = new Node(Id.VARDEC);
                n.add(vardec);
                n.addTree(locals);
                {if (true) return n;}
      break;
    default:
      jj_la1[10] = jj_gen;

         n = new Node (Id.EMPTY_STMNT); {if (true) return n;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Stmt() throws ParseException {
        Node expr, cond, stmt, else_part;
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_CONSTANT:
    case IDENT:
    case NOT:
    case LPAREN:
    case MINUS:
    case CHARACTER:
      expr = Expr();
      jj_consume_token(SEMI);
                              {if (true) return expr;}
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
      case IDENT:
      case NOT:
      case LPAREN:
      case MINUS:
      case CHARACTER:
        expr = Expr();
        jj_consume_token(SEMI);
                n = new Node (Id.RETURN);
                n.add (expr);
                {if (true) return n;}
        break;
      case SEMI:
        jj_consume_token(SEMI);
                n = new Node (Id.RETURN);
                {if (true) return n;}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      cond = Exp_In_Paren();
      stmt = Stmt();
                        n = new Node (Id.WHILE);
                        n.add (cond);
                        n.add (stmt);
                        {if (true) return n;}
      break;
    case IF:
      jj_consume_token(IF);
      cond = Exp_In_Paren();
      stmt = Stmt();
      else_part = Else_part();
                        n = new Node (Id.IF);
                        n.add (cond);
                        n.add (stmt);
                        n.add (else_part);
                        {if (true) return n;}
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      stmt = Stmts();
      jj_consume_token(RBRACE);
                                            {if (true) return stmt;}
      break;
    case SEMI:
      jj_consume_token(SEMI);
                  n = new Node (Id.EMPTY_STMNT); {if (true) return n;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Stmts() throws ParseException {
        Node stmt;
        Node stmts;
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case RETURN:
    case WHILE:
    case INTEGER_CONSTANT:
    case IDENT:
    case NOT:
    case LPAREN:
    case MINUS:
    case SEMI:
    case LBRACE:
    case CHARACTER:
      stmt = Stmt();
      stmts = Stmts();
                n = new Node(Id.STMNT);
                n.add(stmt);
                n.addTree(stmts);
                {if (true) return n;}
      break;
    default:
      jj_la1[13] = jj_gen;

                n = new Node(Id.EMPTY_STMNT);
                {if (true) return n;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Else_part() throws ParseException {
        Node stmt, n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      stmt = Stmt();
                              {if (true) return stmt;}
      break;
    default:
      jj_la1[14] = jj_gen;

               n = new Node (Id.EMPTY_STMNT); {if (true) return n;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Expr_list() throws ParseException {
        Node e1, e2;
        Node expr_list;
    e1 = Expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      e2 = Expr_list();
                expr_list = new Node(Id.EXPR);
                expr_list.add(e1);
                expr_list.addTree(e2);

                {if (true) return expr_list;}
      break;
    default:
      jj_la1[15] = jj_gen;

                expr_list = new Node(Id.EXPR);
                expr_list.add(e1);
                {if (true) return expr_list;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Actuals() throws ParseException {
        Node expr_list;
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_CONSTANT:
    case IDENT:
    case NOT:
    case LPAREN:
    case MINUS:
    case CHARACTER:
      expr_list = Expr_list();
                                 {if (true) return expr_list;}
      break;
    default:
      jj_la1[16] = jj_gen;

              {if (true) return new Node(Id.EMPTY_STMNT);}
    }
    throw new Error("Missing return statement in function");
  }

// Indentifier and Integer Constant has the highest priority.
//So we don't need to touch this.
  static final public Node Identifier() throws ParseException {
        Token t;
        Node n;
    t = jj_consume_token(IDENT);
                n = new IdentifierNode(t.image, Position.fromToken(t));
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Node IntegerLiteral() throws ParseException {
        Token t;
        Node n;
    t = jj_consume_token(INTEGER_CONSTANT);
                n = new IntegerLiteralNode(Integer.parseInt(t.image), Position.fromToken(t));
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//we can use this for both Condition and High precedence expression.
  static final public Node Exp_In_Paren() throws ParseException {
        Node t;
    jj_consume_token(LPAREN);
    t = Expr();
    jj_consume_token(RPAREN);
                                      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Character() throws ParseException {
        Token t;
        Node n;
    t = jj_consume_token(CHARACTER);
                n = new Node(Id.CHAR);
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//Priority 16
  static final public Node Term() throws ParseException {
        Node t1, t2, t3;
        Node id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARACTER:
      t1 = Character();
                      {if (true) return t1;}
      break;
    case INTEGER_CONSTANT:
      t1 = IntegerLiteral();
                                  {if (true) return t1;}
      break;
    case LPAREN:
      t1 = Exp_In_Paren();
                                {if (true) return t1;}
      break;
    case IDENT:
      t1 = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        t2 = Expr();
        jj_consume_token(RBRACK);
                                               t3 = new Node (Id.ARRAY); t3.add(t1); t3.add(t2); {if (true) return t3;}
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        t2 = Actuals();
        jj_consume_token(RPAREN);
                                                    t3 = new Node (Id.FCALL); t3.add(t1); t3.add(t2); {if (true) return t3;}
        break;
      default:
        jj_la1[17] = jj_gen;
                    {if (true) return t1;}
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//Priority 14
  static final public Node Unary() throws ParseException {
        Node inside, outside;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
      case IDENT:
      case LPAREN:
      case CHARACTER:
        inside = Term();
        break;
      case NOT:
      case MINUS:
        inside = Unary();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                outside = new UnaryNode (Unop.NEG, inside);
                {if (true) return outside;}
      break;
    case NOT:
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
      case IDENT:
      case LPAREN:
      case CHARACTER:
        inside = Term();
        break;
      case NOT:
      case MINUS:
        inside = Unary();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                outside = new UnaryNode (Unop.NOT, inside);
                {if (true) return outside;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Priority14_Expr() throws ParseException {
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_CONSTANT:
    case IDENT:
    case LPAREN:
    case CHARACTER:
      n = Term();
      break;
    case NOT:
    case MINUS:
      n = Unary();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

// *, /
  static final public Node Priority13L_Expr() throws ParseException {
        Node t1, exp;
    t1 = Priority14_Expr();
    exp = Priority13L_Expr2(t1);
                                                            {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Priority13L_Expr2(Node t1) throws ParseException {
        Node t2, t3, exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      jj_consume_token(MUL);
      t2 = Priority14_Expr();
                                       t3 = new BinaryNode (Binop.MUL, t1, t2);
      exp = Priority13L_Expr2(t3);
                                                                                                                {if (true) return exp;}
      break;
    case DIV:
      jj_consume_token(DIV);
      t2 = Priority14_Expr();
                                         t3 = new BinaryNode (Binop.DIV, t1, t2);
      exp = Priority13L_Expr2(t3);
                                                                                                                  {if (true) return exp;}
      break;
    default:
      jj_la1[23] = jj_gen;
           {if (true) return t1;}
    }
    throw new Error("Missing return statement in function");
  }

// + , -
  static final public Node Priority12L_Expr() throws ParseException {
        Node t1, exp;
    t1 = Priority13L_Expr();
    exp = Priority12L_Expr2(t1);
                                                             {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Priority12L_Expr2(Node t1) throws ParseException {
        Node t2, t3, exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      t2 = Priority13L_Expr();
                                         t3 = new BinaryNode (Binop.PLUS, t1, t2);
      exp = Priority12L_Expr2(t3);
                                                                                                                   {if (true) return exp;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t2 = Priority13L_Expr();
                                            t3 = new BinaryNode (Binop.MINUS, t1, t2);
      exp = Priority12L_Expr2(t3);
                                                                                                                       {if (true) return exp;}
      break;
    default:
      jj_la1[24] = jj_gen;
           {if (true) return t1;}
    }
    throw new Error("Missing return statement in function");
  }

// <, >, <=, >=
  static final public Node Priority10L_Expr() throws ParseException {
        Node t1, exp;
    t1 = Priority12L_Expr();
    exp = Priority10L_Expr2(t1);
                                                             {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Priority10L_Expr2(Node t1) throws ParseException {
        Node t2, t3, exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LTEQ:
      jj_consume_token(LTEQ);
      t2 = Priority12L_Expr();
                                         t3 = new BinaryNode (Binop.LTEQ, t1, t2);
      exp = Priority10L_Expr2(t3);
                                                                                                                   {if (true) return exp;}
      break;
    case LT:
      jj_consume_token(LT);
      t2 = Priority12L_Expr();
                                         t3 = new BinaryNode (Binop.LT, t1, t2);
      exp = Priority10L_Expr2(t3);
                                                                                                                 {if (true) return exp;}
      break;
    case GTEQ:
      jj_consume_token(GTEQ);
      t2 = Priority12L_Expr();
                                           t3 = new BinaryNode (Binop.GTEQ, t1, t2);
      exp = Priority10L_Expr2(t3);
                                                                                                                     {if (true) return exp;}
      break;
    case GT:
      jj_consume_token(GT);
      t2 = Priority12L_Expr();
                                         t3 = new BinaryNode (Binop.GT, t1, t2);
      exp = Priority10L_Expr2(t3);
                                                                                                                 {if (true) return exp;}
      break;
    default:
      jj_la1[25] = jj_gen;
           {if (true) return t1;}
    }
    throw new Error("Missing return statement in function");
  }

// ==, !-
  static final public Node Priority9L_Expr() throws ParseException {
        Node t1, exp;
    t1 = Priority10L_Expr();
    exp = Priority9L_Expr2(t1);
                                                            {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Priority9L_Expr2(Node t1) throws ParseException {
        Node t2, t3, exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQEQ:
      jj_consume_token(EQEQ);
      t2 = Priority10L_Expr();
                                         t3 = new BinaryNode (Binop.EQ, t1, t2);
      exp = Priority9L_Expr2(t3);
                                                                                                                {if (true) return exp;}
      break;
    case NOTEQ:
      jj_consume_token(NOTEQ);
      t2 = Priority10L_Expr();
                                            t3 = new BinaryNode (Binop.NE, t1, t2);
      exp = Priority9L_Expr2(t3);
                                                                                                                   {if (true) return exp;}
      break;
    default:
      jj_la1[26] = jj_gen;
           {if (true) return t1;}
    }
    throw new Error("Missing return statement in function");
  }

// &&
  static final public Node Priority5L_Expr() throws ParseException {
        Node t1, exp;
    t1 = Priority9L_Expr();
    exp = Priority5L_Expr2(t1);
                                                           {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Priority5L_Expr2(Node t1) throws ParseException {
        Node t2, t3, exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANDAND:
      jj_consume_token(ANDAND);
      t2 = Priority9L_Expr();
                                          t3 = new BinaryNode (Binop.ANDAND, t1, t2);
      exp = Priority5L_Expr2(t3);
                                                                                                                     {if (true) return exp;}
      break;
    default:
      jj_la1[27] = jj_gen;
           {if (true) return t1;}
    }
    throw new Error("Missing return statement in function");
  }

// ||
  static final public Node Priority4L_Expr() throws ParseException {
        Node t1, exp;
    t1 = Priority5L_Expr();
    exp = Priority4L_Expr2(t1);
                                                           {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Priority4L_Expr2(Node t1) throws ParseException {
        Node t2, t3, exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OROR:
      jj_consume_token(OROR);
      t2 = Priority5L_Expr();
                                        t3 = new BinaryNode (Binop.OROR, t1, t2);
      exp = Priority4L_Expr2(t3);
                                                                                                                 {if (true) return exp;}
      break;
    default:
      jj_la1[28] = jj_gen;
           {if (true) return t1;}
    }
    throw new Error("Missing return statement in function");
  }

// =
// E -> T = E | T  
  static final public Node Priority2R_Expr() throws ParseException {
        Node t1, t2, t3;
    t1 = Priority4L_Expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      t2 = Priority2R_Expr();
                                     t3 = new Node (Id.ASSIGN); t3.add(t1); t3.add(t2); {if (true) return t3;}
      break;
    default:
      jj_la1[29] = jj_gen;
           {if (true) return t1;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node Expr() throws ParseException {
        Node t;
    t = Priority2R_Expr();
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(INTEGER_CONSTANT)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    if (jj_3R_2()) return true;
    if (jj_3R_3()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  static private boolean jj_3R_5() {
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SemanticAnalyserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x5100,0x80000000,0x5100,0x0,0x1100,0x5100,0x80000000,0x5100,0x10000000,0x0,0x1100,0xa1250000,0xa125a800,0xa125a800,0x200,0x10000000,0x21250000,0x1000000,0x1050000,0x21250000,0x21250000,0x20200000,0x21250000,0x44000000,0x28000000,0x0,0x100000,0x400000,0x800000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x0,0x40,0x0,0x0,0x100,0x0,0x0,0x40,0x0,0x400,0x500,0x500,0x0,0x0,0x400,0x40,0x400,0x400,0x400,0x0,0x400,0x0,0x0,0x33,0x4,0x0,0x0,0x8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SemanticAnalyser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SemanticAnalyser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SemanticAnalyserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SemanticAnalyser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SemanticAnalyserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SemanticAnalyser(SemanticAnalyserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SemanticAnalyserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
